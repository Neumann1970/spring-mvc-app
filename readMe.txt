                                    ***WELCOM TO CUSTOM SHOP*** 
                                    
1. Backend для информационной системы "Интернет-магазин".

2. Система получает данные путем отправки REST-запросов к серверу. Ответ отправляться в виде JSON.

3. Список операций (клиент):
- отображение списка категорий товаров (все)
- отображение списка товаров в категории (по переданной категории)
- отображение информации по товару (по идентификатору товара)
- добавление товара в корзину (со стороны сервера реализована хранение корзины во время жизни http-сессии).
- заказ товара (список идентификаторов товаров из корзины ( - id корзины - ), имя/фамилия клиента, телефон)

4. Список операций (администратор):
- Реализована возможность входа в защищенную часть магазина (по логину/паролю), а также выхода. Операции, перечисленные ниже, доступны после успешного входа в панель администратора.
- добавление/изменение/удаление категории (по id категории)
- добавление/изменение/удаление товара (id категории, id товара)
- просмотр списка заказов
- изменение статуса конкретного заказа (NEW -> IN_PROGRESS -> COMPLETE)
- сохранять список всех выполненных (COMPLETE) заказов в CSV со всеми атрибутами

----------------------------------------------------
----------------------------------------------------
----------------------------------------------------

MISC:

- Для построения REST API используется Spring WebMVC.
- Для валидации данных ItemValidator implements Validator.
- Для работы с данными (Model) используется Spring Data формирование запроса по сигнатуре. Изменение статуса реализовано через @Query UPDATE.
- Сохранение лога заказов при помощи TransactionalEventListener.
- Для обеспечения функциональности API, доступного администратору применяется Spring Security, использовать URL-based ограничения, без @PreAuthorize.
- Для обеспечения проверки на авторизацию применяется @PreAuthorize в связке с hasRole.
- Взаимодействие контроллеров и DAO слоя осуществляеться через сервисы.
- Хранение состояния корзины во время жизни сессии реализованно с помощью бина со @Scope("session").
- При проектировании REST API применены http-методы POST/GET/PUT/DELETE/PATCH. PATCH - опционально.



----------------------------------------------------
----------------------------------------------------
----------------------------------------------------



Auth(Basic)

Log: admin
Passwd: admin


Add product

{
   "name": "Tablet",
   "products": [
                  {"name": "iPad_Mini", "price": 30000},
                  {"name": "iPad2", "price": 10000},
                  {"name": "iPad_Pro", "price": 100000},
                  {"name": "iPad_Air", "price": 50000}
                  ]
}

Add order

{
   "status": "NEW",
   "totalPrice": 100000,
   "jsession": "erqwreqwerqwer211",
   "items":  [{"quantity":2,"productName": "Macbook", "productPrice": 50000}],
   "owner":{"name":"Alex","email":"alex1999@mail.com","phone":"1123123235324"}
}

Add item to cart

{"quantity":2,"productName": "Macbook", "productPrice": 50000}


Owner for Order commit

POST http://localhost:8080/spring-mvc-app/cart/commit/

{"name":"Alex","email":"alex1999@mail.com","phone":"123235324"} 






